// Code generated by protoc-gen-go.
// source: protobufs/user/user.proto
// DO NOT EDIT!

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	protobufs/user/user.proto

It has these top-level messages:
	AuthRequest
	AuthResponse
	User
*/
package user

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "code.google.com/p/protorpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type AuthRequest struct {
	Token            *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}

func (m *AuthRequest) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type AuthResponse struct {
	Valid            *bool  `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	User             *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}

func (m *AuthResponse) GetValid() bool {
	if m != nil && m.Valid != nil {
		return *m.Valid
	}
	return false
}

func (m *AuthResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FirstName        *string `protobuf:"bytes,2,opt,name=first_name" json:"first_name,omitempty"`
	LastName         *string `protobuf:"bytes,3,opt,name=last_name" json:"last_name,omitempty"`
	Email            *string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	AuthToken        *string `protobuf:"bytes,5,opt,name=auth_token" json:"auth_token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}

func (m *User) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *User) GetFirstName() string {
	if m != nil && m.FirstName != nil {
		return *m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil && m.LastName != nil {
		return *m.LastName
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *User) GetAuthToken() string {
	if m != nil && m.AuthToken != nil {
		return *m.AuthToken
	}
	return ""
}

func init() {
}

type UserService interface {
	Auth(in *AuthRequest, out *AuthResponse) error
}

// AcceptUserServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptUserServiceClient(lis net.Listener, x UserService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("UserService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterUserService publish the given UserService implementation on the server.
func RegisterUserService(srv *rpc.Server, x UserService) error {
	if err := srv.RegisterName("UserService", x); err != nil {
		return err
	}
	return nil
}

// NewUserServiceServer returns a new UserService Server.
func NewUserServiceServer(x UserService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("UserService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeUserService listen announces on the local network address laddr
// and serves the given UserService implementation.
func ListenAndServeUserService(network, addr string, x UserService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("UserService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type UserServiceClient struct {
	*rpc.Client
}

// NewUserServiceClient returns a UserService rpc.Client and stub to handle
// requests to the set of UserService at the other end of the connection.
func NewUserServiceClient(conn io.ReadWriteCloser) (*UserServiceClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &UserServiceClient{c}, c
}

func (c *UserServiceClient) Auth(in *AuthRequest, out *AuthResponse) error {
	return c.Call("UserService.Auth", in, out)
}

// DialUserService connects to an UserService at the specified network address.
func DialUserService(network, addr string) (*UserServiceClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &UserServiceClient{c}, c, nil
}

// DialUserServiceTimeout connects to an UserService at the specified network address.
func DialUserServiceTimeout(network, addr string,
	timeout time.Duration) (*UserServiceClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &UserServiceClient{c}, c, nil
}
