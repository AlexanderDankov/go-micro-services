// Code generated by go-bindata.
// sources:
// data/locations.json
// data/profiles.json
// data/rates.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataLocationsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x00\x82\x6a\x30\x09\x02\x4a\x19\xf9\x25\xa9\x39\x9e\x29\x4a\x56\x0a\x4a\x86\x4a\x3a\x08\xf1\x9c\xc4\x12\xa0\x98\xb1\xb9\x9e\xb9\x85\x99\x39\xb2\x78\x7e\x1e\x50\x5c\xd7\xd0\xc8\x48\xcf\xc4\xd0\xd0\x08\x2c\x51\xab\x83\xc7\x54\x23\x1c\xa6\x9a\x9a\xe0\x30\xd5\xc0\xc0\x94\xb0\xa9\xc6\x38\x4c\x35\xc6\x69\xaa\xb9\x21\x61\x53\x4d\xb0\x9b\x6a\x69\x6c\x86\xdd\x54\x63\x4b\x63\x03\xc2\xa6\x9a\xe2\x72\xab\x21\xae\x70\xb5\x20\xc2\xad\x66\xb8\x62\xcb\x18\x57\x08\x18\x42\xc3\x95\x2b\x96\x0b\x10\x00\x00\xff\xff\xc2\xb0\xd9\xce\x07\x02\x00\x00")

func dataLocationsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataLocationsJson,
		"data/locations.json",
	)
}

func dataLocationsJson() (*asset, error) {
	bytes, err := dataLocationsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/locations.json", size: 519, mode: os.FileMode(420), modTime: time.Unix(1478580357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProfilesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x97\xcd\x6e\xe3\x36\x10\xc7\xef\x79\x8a\x41\x4e\x2d\x60\x05\x96\x25\xf9\xa3\xb7\x38\xdb\x64\x0b\xd4\x45\xb0\x4e\x5b\xb4\x45\x0f\x23\x72\x62\xb1\xa1\x48\x97\xa4\x36\x6b\x14\x0b\xf4\x35\xfa\x7a\x7d\x92\x0e\x65\xa7\x76\x62\x5b\x49\x73\x4a\x75\x08\x22\x71\x38\xfc\x98\x5f\xfe\xf3\xcf\x2f\x27\xc0\xcf\x1f\xed\xcf\xf8\x9c\x2a\x79\xfa\x15\x9c\xa6\xa7\xbd\xed\x27\x83\x35\xc5\x8f\x17\x5a\xdd\x06\x78\x6f\x03\xe9\xdd\xe1\x65\x65\x0d\x7d\xd7\xd4\x25\xb9\x18\xf5\x45\x9e\x16\x5f\xc2\x68\x54\x24\xf9\xa8\xdf\xdf\x0d\x94\xe4\x85\x53\xcb\xa0\xac\x89\x81\xe7\x30\x4c\x6a\x65\x9a\x40\x70\x8f\xfa\x0e\x6e\x9d\xad\xe1\x7b\xc3\xa3\x30\xff\xbd\x41\x47\x80\x46\x42\x0e\xeb\x18\xbf\x1e\x47\x98\x35\x46\xc1\x8c\x82\xb3\xe0\x03\xc6\x64\x3d\x08\x95\xf2\xa0\x9b\x4f\x8d\x5b\x41\x15\xf7\x07\xbc\x96\x5a\x18\x92\x50\xae\xe0\xba\x52\x5a\x2d\x97\x04\xf3\x80\x4e\xf0\x42\x84\xa1\x71\x9c\x11\x0d\xa0\x0b\x7e\x05\xb7\x8d\x33\x2a\x7e\x03\x61\xb5\x26\x11\xb3\x82\x32\x9c\x97\x40\xdb\xb2\x5c\xf5\xf8\x4d\xe8\x46\x2a\xb3\x80\x7b\xeb\xee\x62\xda\x39\xea\x8f\x28\xad\x83\x77\xa8\xd5\xd9\xee\x41\x51\x4a\x4e\xef\xf9\x90\xdb\x8b\x6d\x07\x7c\x70\x44\x61\x7b\x57\xf9\xa4\xd8\x99\xb7\x1b\xb2\xb9\xf2\x2b\x42\x3e\xd2\x3c\x3c\x8d\x12\x2a\xac\xe2\xf8\x9c\x8f\x70\xe9\xd0\x08\xe5\x85\xdd\x4f\x85\x61\x5d\xb8\xf3\xbd\xf9\xb6\x31\xc1\xb5\x29\xf8\xc6\x03\xdf\xd3\x3c\x06\xfb\xa7\x71\x4b\xcb\x49\xf4\x85\x95\x6d\x9e\x49\x9e\xf6\x07\x4f\x43\x34\x06\x1e\xcb\x46\x67\xa3\xf1\x70\xf4\x74\xac\xad\x74\x92\x0e\x06\x67\x79\x9a\x0e\xfe\x1d\xfc\xdc\xfe\xf6\xb9\x77\x18\xbe\xc1\x21\xf8\x7e\x84\x63\x67\x3d\x06\xe0\x28\x29\xb2\x4e\x00\xbf\xe5\x1a\x71\x89\x23\x05\x50\x6a\x2b\x36\x08\xc6\xa2\xff\x44\xae\x44\x98\x36\x64\x10\x2e\xc8\x04\x72\x70\xcb\x95\x8e\x43\xe7\x4c\xcc\x86\x38\x2e\x95\x91\x0f\xc4\xf1\x3b\x42\x3a\xe8\x46\xfa\x75\x98\xa4\xe3\xb4\x1b\x93\xcc\xc9\x37\x05\x49\xd6\x01\x49\x91\x77\x40\xd2\xef\x17\x2f\x84\x24\x3b\x04\x49\xab\x4d\xf0\x33\x85\x80\xcf\x02\x52\xe4\x59\x32\x2e\x8a\xa2\x53\xa1\xb2\xfd\x72\x46\x06\xae\xed\x3d\x69\xcd\xd7\x11\x8b\x00\x02\x4b\x4d\x89\x40\xe6\x83\x75\x04\x1d\x5f\x9b\x6c\xb5\x6b\x7a\xfe\xe1\x06\x1c\x2a\xfd\x44\xa9\x2a\xb5\xdc\x40\x33\x79\xac\x6e\x8f\xd4\x4f\xd8\xba\x54\x86\x62\xf8\xa2\x4a\x02\x89\x8a\xb5\x48\x2e\x5a\x09\x52\xa1\xda\x48\x57\xb0\x8d\xa8\xc8\xbf\x0e\xac\xe2\x19\xf9\x29\x78\x99\xff\x0b\x57\x59\x27\x57\xa3\xf4\x85\x5c\xe5\xc7\xb9\xfa\x41\xf1\x76\xe8\x59\xb0\x06\xa3\x71\x92\x75\xb7\xbe\x9b\x48\xc1\x3d\x9f\xd9\x71\xd9\x4d\xd8\xc0\xd0\x56\x75\x8a\x2b\x98\x3a\x25\x17\x04\x1f\x15\xdd\xfb\xa8\x2b\xd9\x5a\x9e\xfc\x16\xc0\x4b\x65\xe2\xbd\xa3\x86\x77\x8a\x4b\xa6\x44\x68\x81\x43\xc8\x0f\x03\x7b\x49\x8e\xfb\xc8\xb4\x51\x3a\xb6\xb0\xd7\xc1\x32\xee\x66\x65\xa6\xbc\x6f\xe9\x7d\x43\xbc\xec\xe1\xbd\xe5\x65\x92\x0d\x8f\xf3\x92\x4d\xb2\xfe\x0b\x79\x29\x0e\xf1\x72\x5d\x59\x32\xea\xd3\x8b\xbd\xd2\x30\x49\xb3\x71\x67\xab\xb2\x02\xe3\xc1\x37\x9e\xe4\x86\xfb\x0e\x39\x6d\xf9\xd5\x10\xab\x43\x69\x5d\x65\xad\xec\xc5\x0e\xd4\xdf\x27\x00\x8f\x2a\x91\x6b\x7d\x54\x6d\x03\x37\xb7\x28\x2e\x04\x15\xb2\xe0\xf0\x45\xf2\x62\x35\x9a\x15\xb8\xd8\x17\xeb\xc6\x2b\xa6\xcd\xf8\x96\x32\xcb\x5b\x70\x20\x48\x53\xe9\x54\x50\xac\x50\x9e\xdd\x11\xb5\x3b\x4b\x27\x45\xdf\x9f\xc1\x37\xe1\xef\x3f\xff\xf2\xc7\x79\xe4\xb5\x79\x49\x25\xe0\xca\xb1\x19\x83\xf3\x9a\xf8\x85\xf1\x98\xc5\x85\xe0\x3d\xb2\xb8\x1a\x3e\x57\x60\xcf\x55\xbe\x8e\xd6\x61\xff\x99\x9e\xf9\xb5\x94\x6f\xcb\x59\x4d\xba\xc4\x2d\xed\x72\x56\xe3\x97\x8a\xdb\xf0\x10\xac\xf3\x70\x06\x1f\x68\xc1\x34\xfc\x37\x87\x35\x18\xe7\x09\x37\xec\x2e\x6c\xb7\xa9\xb9\xb0\xd4\xd4\x70\xc3\x8d\xd3\xad\xad\x52\x3e\x48\x22\x03\x6c\xad\xf3\x71\x0e\xfc\x8f\x85\xbf\x5b\xf1\x64\x5c\xc6\x80\x35\xe6\x73\xdb\xb0\x22\xda\x5b\x98\xa1\xbb\xe3\x46\x2b\x1f\xb4\x8e\x3f\x3d\xda\x6b\x0f\x2e\xd8\x83\xb3\x43\x33\x0a\xf9\x8f\x40\xfe\x86\x82\x4d\x1b\xf7\xc6\x47\x46\xee\x0a\x9d\x24\xc3\xe6\x6d\x66\x79\x8e\xa1\x8d\xb3\xeb\xc1\x35\x8a\x69\xec\xe7\x0f\xfa\xd8\x52\xde\x6e\x60\x77\x91\x87\x33\xc4\xfd\x70\xd9\x9c\x89\x56\xf0\x95\x86\x6e\xf0\x4c\xe3\x7d\x6b\x86\xae\x8b\xcd\x61\xd6\xd5\x78\xd3\x3d\x43\x77\xf2\xeb\xc9\x3f\x01\x00\x00\xff\xff\xd4\xa1\x82\xaf\x76\x0e\x00\x00")

func dataProfilesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataProfilesJson,
		"data/profiles.json",
	)
}

func dataProfilesJson() (*asset, error) {
	bytes, err := dataProfilesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/profiles.json", size: 3702, mode: os.FileMode(420), modTime: time.Unix(1478580793, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataRatesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x00\x82\x6a\x30\x09\x02\x4a\x19\xf9\x25\xa9\x39\x9e\x29\x4a\x56\x0a\x4a\x86\x4a\x3a\x08\xf1\xe4\xfc\x94\x54\x90\x60\x90\xa3\xb3\x37\xb2\x78\x66\x9e\x4b\x62\x09\x58\xc6\xc8\xc0\xd0\x54\xd7\xc0\x44\xd7\xc0\x12\x59\x3e\xbf\xb4\x04\x5d\x81\xa1\x01\xb2\x82\xa2\xfc\xfc\xdc\x90\xca\x02\x90\x0a\x84\x33\x80\xe2\x49\xf9\xf9\xd9\x89\x49\x39\xa9\x41\x10\xdd\x86\x06\x96\x7a\x06\x06\x3a\xc8\x2a\x60\x4e\xf2\xf6\x73\x57\x42\x91\x48\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x03\xcb\x67\xe6\xa5\x2b\x14\x67\x56\xa5\xa6\x28\x24\xa5\xa6\xa0\x2a\x2d\xc9\x2f\x49\xcc\xc1\x6d\x05\x5c\xda\x33\x2f\x39\xa7\xb4\x38\xb3\x0c\xac\xce\xc8\x58\xcf\xd0\x1c\xae\xac\x96\x0b\x42\xc6\x72\x01\x02\x00\x00\xff\xff\xe0\xd7\xdf\xfa\x4d\x01\x00\x00")

func dataRatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataRatesJson,
		"data/rates.json",
	)
}

func dataRatesJson() (*asset, error) {
	bytes, err := dataRatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/rates.json", size: 333, mode: os.FileMode(420), modTime: time.Unix(1456591432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/locations.json": dataLocationsJson,
	"data/profiles.json": dataProfilesJson,
	"data/rates.json": dataRatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"locations.json": &bintree{dataLocationsJson, map[string]*bintree{}},
		"profiles.json": &bintree{dataProfilesJson, map[string]*bintree{}},
		"rates.json": &bintree{dataRatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

