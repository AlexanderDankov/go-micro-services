// Code generated by go-bindata.
// sources:
// data/customers.json
// data/locations.json
// data/profiles.json
// data/rates.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCustomersJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x00\x82\x6a\x30\x09\x02\x4a\x99\x29\x4a\x56\x0a\x86\x3a\x08\x81\xc4\xd2\x92\x8c\x90\xfc\xec\xd4\x3c\xa0\xb8\x52\x98\xa3\x8f\xa7\x4b\x7c\x88\xbf\xb7\xab\x9f\x12\x58\x49\x2d\x57\x2c\x17\x20\x00\x00\xff\xff\x2b\x28\xf3\x0d\x44\x00\x00\x00")

func dataCustomersJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataCustomersJson,
		"data/customers.json",
	)
}

func dataCustomersJson() (*asset, error) {
	bytes, err := dataCustomersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/customers.json", size: 68, mode: os.FileMode(420), modTime: time.Unix(1445724030, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLocationsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x00\x82\x6a\x30\x09\x02\x4a\x19\xf9\x25\xa9\x39\x9e\x29\x4a\x56\x0a\x4a\x86\x4a\x3a\x08\xf1\x9c\xc4\x12\xa0\x98\xb1\xb9\x9e\xb9\x85\x99\x39\xb2\x78\x7e\x1e\x50\x5c\xd7\xd0\xc8\x48\xcf\xc4\xd0\xd0\x08\x2c\x51\xab\x83\xc7\x54\x23\x1c\xa6\x9a\x9a\xe0\x30\xd5\xc0\xc0\x94\xb0\xa9\xc6\x38\x4c\x35\xc6\x69\xaa\xb9\x21\x61\x53\x4d\xb0\x9b\x6a\x69\x6c\x86\xdd\x54\x63\x4b\x63\x03\xc2\xa6\x9a\xe2\x72\xab\x21\xae\x70\xb5\x20\xc2\xad\x66\xb8\x62\xcb\x18\x57\x08\x18\x42\xc3\x95\x2b\x96\x0b\x10\x00\x00\xff\xff\xc2\xb0\xd9\xce\x07\x02\x00\x00")

func dataLocationsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataLocationsJson,
		"data/locations.json",
	)
}

func dataLocationsJson() (*asset, error) {
	bytes, err := dataLocationsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/locations.json", size: 519, mode: os.FileMode(420), modTime: time.Unix(1478580357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProfilesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x97\xdd\x6e\xe3\x36\x13\x86\xcf\x73\x15\x83\x1c\x7d\x1f\x60\x05\x96\x25\xf9\xa7\x67\x71\xb6\xc9\x16\xa8\x8b\x60\x9d\xb6\x68\x8b\x1e\x8c\xc8\x89\xc5\x86\x22\x5d\x92\xda\xac\x51\x2c\xd0\xdb\xe8\xed\xf5\x4a\x3a\x94\x9d\xda\x89\x6d\x25\xcd\x51\x56\x07\x41\x24\x0e\x87\x3f\xf3\xe4\x9d\x37\xbf\x9c\x00\x3f\x7f\xb4\x3f\xe3\x73\xaa\xe4\xe9\x57\x70\x9a\x9e\xf6\xb6\x9f\x0c\xd6\x14\x3f\x5e\x68\x75\x1b\xe0\xbd\x0d\xa4\x77\x87\x97\x95\x35\xf4\x5d\x53\x97\xe4\x62\xd4\xff\xf2\xb4\xf8\x3f\x8c\x46\x45\x92\x8f\xfa\xfd\xdd\x40\x49\x5e\x38\xb5\x0c\xca\x9a\x18\x78\x0e\xc3\xa4\x56\xa6\x09\x04\xf7\xa8\xef\xe0\xd6\xd9\x1a\xbe\x37\x3c\x0a\xf3\xdf\x1b\x74\x04\x68\x24\xe4\xb0\x8e\xf1\xeb\x71\x84\x59\x63\x14\xcc\x28\x38\x0b\x3e\x60\x4c\xd6\x83\x50\x29\x0f\xba\xf9\xd4\xb8\x15\x54\x71\x7f\xc0\x6b\xa9\x85\x21\x09\xe5\x0a\xae\x2b\xa5\xd5\x72\x49\x30\x0f\xe8\x04\x2f\x44\x18\x1a\xc7\x19\xd1\x00\xba\xe0\x57\x70\xdb\x38\xa3\xe2\x37\x10\x56\x6b\x12\x31\x2b\x28\xc3\x79\x09\xb4\x2d\xcb\x55\x8f\xdf\x84\x6e\xa4\x32\x0b\xb8\xb7\xee\x2e\xa6\x9d\xa3\xfe\x88\xd2\x3a\x78\x87\x5a\x9d\xed\x1e\x14\xa5\xe4\xf4\x9e\x0f\xb9\xbd\xd8\x76\xc0\x07\x47\x14\xb6\x77\x95\x4f\x8a\x9d\x79\xbb\x21\x9b\x2b\xbf\x22\xe4\x23\xcd\xc3\xd3\x28\xa1\xc2\x2a\x8e\xcf\xf9\x08\x97\x0e\x8d\x50\x5e\xd8\xfd\x54\x18\xd6\x85\x3b\xdf\x9b\x6f\x1b\x13\x5c\x9b\x82\x6f\x3c\xf0\x3d\xcd\x63\xb0\x7f\x1a\xb7\xb4\x9c\x44\x5f\x58\xd9\xe6\x99\xe4\x69\x7f\xf0\x34\x44\x63\xe0\xb1\x6c\x74\x36\x1a\x0f\x47\x4f\xc7\xda\x4a\x27\xe9\x60\x70\x96\xa7\xe9\xe0\xdf\xc1\xcf\xed\x6f\x9f\x7b\x87\xe1\x1b\x1c\x82\xef\x47\x38\x76\xd6\x63\x00\x8e\x92\x22\xeb\x04\xf0\x5b\xae\x11\x97\x38\x52\x00\xa5\xb6\x62\x83\x60\x2c\xfa\x4f\xe4\x4a\x84\x69\x43\x06\xe1\x82\x4c\x20\x07\xb7\x5c\xe9\x38\x74\xce\xc4\x6c\x88\xe3\x52\x19\xf9\x40\x1c\xbf\x23\xa4\x83\x6e\xa4\x5f\x87\x49\x3a\x4e\xbb\x31\xc9\x9c\x7c\x53\x90\x64\x1d\x90\x14\x79\x07\x24\xfd\x7e\xf1\x42\x48\xb2\x43\x90\xb4\xda\x04\x3f\x53\x08\xf8\x2c\x20\x45\x9e\x25\xe3\xa2\x28\x3a\x15\x2a\xdb\x2f\x67\x64\xe0\xda\xde\x93\xd6\x7c\x1d\xb1\x08\x20\xb0\xd4\x94\x08\x64\x3e\x58\x47\xd0\xf1\xb5\xc9\x56\xbb\xa6\xe7\x1f\x6e\xc0\xa1\xd2\x4f\x94\xaa\x52\xcb\x0d\x34\x93\xc7\xea\xf6\x48\xfd\x84\xad\x4b\x65\x28\x86\x2f\xaa\x24\x90\xa8\x58\x8b\xe4\xa2\x95\x20\x15\xaa\x8d\x74\x05\xdb\x88\x8a\xfc\xeb\xc0\x2a\x9e\x91\x9f\x82\x97\xf9\x52\xb8\xca\x3a\xb9\x1a\xa5\x2f\xe4\x2a\x3f\xce\xd5\x0f\x8a\xb7\x43\xcf\x82\x35\x18\x8d\x93\xac\xbb\xf5\xdd\x44\x0a\xee\xf9\xcc\x8e\xcb\x6e\xc2\x06\x86\xb6\xaa\x53\x5c\xc1\xd4\x29\xb9\x20\xf8\xa8\xe8\xde\x47\x5d\xc9\xd6\xf2\xe4\xb7\x00\x5e\x2a\x13\xef\x1d\x35\xbc\x53\x5c\x32\x25\x42\x0b\x1c\x42\x7e\x18\xd8\x4b\x72\xdc\x47\xa6\x8d\xd2\xb1\x85\xbd\x0e\x96\x71\x37\x2b\x33\xe5\x7d\x4b\xef\x1b\xe2\x65\x0f\xef\x2d\x2f\x93\x6c\x78\x9c\x97\x6c\x92\xf5\x5f\xc8\x4b\x71\x88\x97\xeb\xca\x92\x51\x9f\x5e\xec\x95\x86\x49\x9a\x8d\x3b\x5b\x95\x15\x18\x0f\xbe\xf1\x24\x37\xdc\x77\xc8\x69\xcb\xaf\x86\x58\x1d\x4a\xeb\x2a\x6b\x65\x2f\x76\xa0\xfe\x3e\x01\x78\x54\x89\x5c\xeb\xa3\x6a\x1b\xb8\xb9\x45\x71\x21\xa8\x90\x05\x87\x2f\x92\x17\xab\xd1\xac\xc0\xc5\xbe\x58\x37\x5e\x31\x6d\xc6\xb7\x94\x59\xde\x82\x03\x41\x9a\x4a\xa7\x82\x62\x85\xf2\xec\x8e\xa8\xdd\x59\x3a\x29\xfa\xfe\x0c\xbe\x09\x7f\xff\xf9\x97\x3f\xce\x23\xaf\xcd\x4b\x2a\x01\x57\x8e\xcd\x18\x9c\xd7\xc4\x2f\x8c\xc7\x2c\x2e\x04\xef\x91\xc5\xd5\xf0\xb9\x02\x7b\xae\xf2\x75\xb4\x0e\xfb\xcf\xf4\xcc\xaf\xa5\x7c\x5b\xce\x6a\xd2\x25\x6e\x69\x97\xb3\x1a\xbf\x54\xdc\x86\x87\x60\x9d\x87\x33\xf8\x40\x0b\xa6\xe1\xbf\x39\xac\xc1\x38\x4f\xb8\x61\x77\x61\xbb\x4d\xcd\x85\xa5\xa6\x86\x1b\x6e\x9c\x6e\x6d\x95\xf2\x41\x12\x19\x60\x6b\x9d\x8f\x73\xe0\x7f\x2c\xfc\xdd\x8a\x27\xe3\x32\x06\xac\x31\x9f\xdb\x86\x15\xd1\xde\xc2\x0c\xdd\x1d\x37\x5a\xf9\xa0\x75\xfc\xe9\xd1\x5e\x7b\x70\xc1\x1e\x9c\x1d\x9a\x51\xc8\x7f\x04\xf2\x37\x14\x6c\xda\xb8\x37\x3e\x32\x72\x57\xe8\x24\x19\x36\x6f\x33\xcb\x73\x0c\x6d\x9c\x5d\x0f\xae\x51\x4c\x63\x3f\x7f\xd0\xc7\x96\xf2\x76\x03\xbb\x8b\x3c\x9c\x21\xee\x87\xcb\xe6\x4c\xb4\x82\xaf\x34\x74\x83\x67\x1a\x2f\x1b\xba\x2f\x03\xcc\x61\xd6\xd5\x75\xd3\x3d\x37\x77\xf2\xeb\xc9\x3f\x01\x00\x00\xff\xff\x8c\x0b\x63\xc4\x73\x0e\x00\x00")

func dataProfilesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataProfilesJson,
		"data/profiles.json",
	)
}

func dataProfilesJson() (*asset, error) {
	bytes, err := dataProfilesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/profiles.json", size: 3699, mode: os.FileMode(420), modTime: time.Unix(1478580344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataRatesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x00\x82\x6a\x30\x09\x02\x4a\x19\xf9\x25\xa9\x39\x9e\x29\x4a\x56\x0a\x4a\x86\x4a\x3a\x08\xf1\xe4\xfc\x94\x54\x90\x60\x90\xa3\xb3\x37\xb2\x78\x66\x9e\x4b\x62\x09\x58\xc6\xc8\xc0\xd0\x54\xd7\xc0\x44\xd7\xc0\x12\x59\x3e\xbf\xb4\x04\x5d\x81\xa1\x01\xb2\x82\xa2\xfc\xfc\xdc\x90\xca\x02\x90\x0a\x84\x33\x80\xe2\x49\xf9\xf9\xd9\x89\x49\x39\xa9\x41\x10\xdd\x86\x06\x96\x7a\x06\x06\x3a\xc8\x2a\x60\x4e\xf2\xf6\x73\x57\x42\x91\x48\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x03\xcb\x67\xe6\xa5\x2b\x14\x67\x56\xa5\xa6\x28\x24\xa5\xa6\xa0\x2a\x2d\xc9\x2f\x49\xcc\xc1\x6d\x05\x5c\xda\x33\x2f\x39\xa7\xb4\x38\xb3\x0c\xac\xce\xc8\x58\xcf\xd0\x1c\xae\xac\x96\x0b\x42\xc6\x72\x01\x02\x00\x00\xff\xff\xe0\xd7\xdf\xfa\x4d\x01\x00\x00")

func dataRatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataRatesJson,
		"data/rates.json",
	)
}

func dataRatesJson() (*asset, error) {
	bytes, err := dataRatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/rates.json", size: 333, mode: os.FileMode(420), modTime: time.Unix(1456591432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/customers.json": dataCustomersJson,
	"data/locations.json": dataLocationsJson,
	"data/profiles.json": dataProfilesJson,
	"data/rates.json": dataRatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"customers.json": &bintree{dataCustomersJson, map[string]*bintree{}},
		"locations.json": &bintree{dataLocationsJson, map[string]*bintree{}},
		"profiles.json": &bintree{dataProfilesJson, map[string]*bintree{}},
		"rates.json": &bintree{dataRatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

