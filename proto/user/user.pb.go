// Code generated by protoc-gen-go.
// source: proto/user/user.proto
// DO NOT EDIT!

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	proto/user/user.proto

It has these top-level messages:
	UserRequest
	UserResponse
	User
*/
package user

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type UserRequest struct {
	Trace string `protobuf:"bytes,1,opt" json:"Trace,omitempty"`
	From  string `protobuf:"bytes,2,opt" json:"From,omitempty"`
	Token string `protobuf:"bytes,3,opt" json:"Token,omitempty"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}

type UserResponse struct {
	Trace string `protobuf:"bytes,1,opt" json:"Trace,omitempty"`
	From  string `protobuf:"bytes,2,opt" json:"From,omitempty"`
	User  *User  `protobuf:"bytes,3,opt" json:"User,omitempty"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	ID        int32  `protobuf:"varint,1,opt" json:"ID,omitempty"`
	Email     string `protobuf:"bytes,2,opt" json:"Email,omitempty"`
	FirstName string `protobuf:"bytes,3,opt" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,4,opt" json:"LastName,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}

func init() {
}

// Client API for UserService service

type UserServiceClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(UserRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
