// Code generated by protoc-gen-go.
// source: proto/rate/rate.proto
// DO NOT EDIT!

/*
Package rate is a generated protocol buffer package.

It is generated from these files:
	proto/rate/rate.proto

It has these top-level messages:
	Request
	Result
	RatePlan
	RoomType
*/
package rate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Request struct {
	HotelIds []int32 `protobuf:"varint,1,rep,name=hotelIds" json:"hotelIds,omitempty"`
	InDate   string  `protobuf:"bytes,2,opt,name=inDate" json:"inDate,omitempty"`
	OutDate  string  `protobuf:"bytes,3,opt,name=outDate" json:"outDate,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Result struct {
	RatePlans []*RatePlan `protobuf:"bytes,1,rep,name=ratePlans" json:"ratePlans,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetRatePlans() []*RatePlan {
	if m != nil {
		return m.RatePlans
	}
	return nil
}

type RatePlan struct {
	HotelId  int32     `protobuf:"varint,1,opt,name=hotelId" json:"hotelId,omitempty"`
	Code     string    `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	InDate   string    `protobuf:"bytes,3,opt,name=inDate" json:"inDate,omitempty"`
	OutDate  string    `protobuf:"bytes,4,opt,name=outDate" json:"outDate,omitempty"`
	RoomType *RoomType `protobuf:"bytes,5,opt,name=roomType" json:"roomType,omitempty"`
}

func (m *RatePlan) Reset()                    { *m = RatePlan{} }
func (m *RatePlan) String() string            { return proto.CompactTextString(m) }
func (*RatePlan) ProtoMessage()               {}
func (*RatePlan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RatePlan) GetRoomType() *RoomType {
	if m != nil {
		return m.RoomType
	}
	return nil
}

type RoomType struct {
	BookableRate       float64 `protobuf:"fixed64,1,opt,name=bookableRate" json:"bookableRate,omitempty"`
	TotalRate          float64 `protobuf:"fixed64,2,opt,name=totalRate" json:"totalRate,omitempty"`
	TotalRateInclusive float64 `protobuf:"fixed64,3,opt,name=TotalRateInclusive" json:"TotalRateInclusive,omitempty"`
	Code               string  `protobuf:"bytes,4,opt,name=code" json:"code,omitempty"`
	Currency           string  `protobuf:"bytes,5,opt,name=currency" json:"currency,omitempty"`
	RoomDescription    string  `protobuf:"bytes,6,opt,name=roomDescription" json:"roomDescription,omitempty"`
}

func (m *RoomType) Reset()                    { *m = RoomType{} }
func (m *RoomType) String() string            { return proto.CompactTextString(m) }
func (*RoomType) ProtoMessage()               {}
func (*RoomType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Request)(nil), "rate.Request")
	proto.RegisterType((*Result)(nil), "rate.Result")
	proto.RegisterType((*RatePlan)(nil), "rate.RatePlan")
	proto.RegisterType((*RoomType)(nil), "rate.RoomType")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Rate service

type RateClient interface {
	// GetRates returns rate codes for hotels for a given date range
	GetRates(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
}

type rateClient struct {
	cc *grpc.ClientConn
}

func NewRateClient(cc *grpc.ClientConn) RateClient {
	return &rateClient{cc}
}

func (c *rateClient) GetRates(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/rate.Rate/GetRates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rate service

type RateServer interface {
	// GetRates returns rate codes for hotels for a given date range
	GetRates(context.Context, *Request) (*Result, error)
}

func RegisterRateServer(s *grpc.Server, srv RateServer) {
	s.RegisterService(&_Rate_serviceDesc, srv)
}

func _Rate_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RateServer).GetRates(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Rate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rate.Rate",
	HandlerType: (*RateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _Rate_GetRates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x91, 0x51, 0x4b, 0xc3, 0x30,
	0x10, 0xc7, 0x89, 0xeb, 0xba, 0xf6, 0xac, 0x9b, 0x1e, 0x8a, 0x65, 0x4f, 0xb5, 0x2f, 0x0e, 0x84,
	0x0d, 0xe6, 0xab, 0x8f, 0x03, 0xd9, 0x9b, 0x94, 0x7d, 0x81, 0xb6, 0x0b, 0x58, 0x8c, 0xbd, 0x9a,
	0xa4, 0xc2, 0xbe, 0x81, 0x1f, 0xdb, 0x24, 0x6d, 0x1c, 0xf8, 0x52, 0xee, 0xfe, 0x4d, 0xef, 0xf7,
	0xeb, 0x05, 0xee, 0x3a, 0x49, 0x9a, 0x36, 0xb2, 0xd4, 0xdc, 0x3d, 0xd6, 0xae, 0xc7, 0xc0, 0xd6,
	0xf9, 0x0b, 0xcc, 0x0a, 0xfe, 0xd5, 0x73, 0xa5, 0xf1, 0x1a, 0xa2, 0x77, 0xd2, 0x5c, 0xec, 0x8f,
	0x2a, 0x65, 0xd9, 0x64, 0x35, 0xc5, 0x39, 0x84, 0x4d, 0xbb, 0x33, 0xc7, 0xd2, 0x8b, 0x8c, 0xad,
	0x62, 0x5c, 0xc0, 0x8c, 0x7a, 0xed, 0x82, 0x89, 0x0d, 0xf2, 0x27, 0x08, 0x0b, 0xae, 0x7a, 0xa1,
	0xf1, 0x01, 0x62, 0x3b, 0xef, 0x4d, 0x94, 0xed, 0xf0, 0xf5, 0xe5, 0x76, 0xbe, 0x76, 0xb4, 0x62,
	0x8c, 0x73, 0x01, 0x91, 0xaf, 0xed, 0xa4, 0x91, 0x65, 0x0e, 0x33, 0x83, 0x4a, 0x20, 0xa8, 0xe9,
	0xe8, 0x41, 0x67, 0xf0, 0xe4, 0x3f, 0x38, 0x70, 0x41, 0x06, 0x91, 0x24, 0xfa, 0x3c, 0x9c, 0x3a,
	0x9e, 0x4e, 0x4d, 0x72, 0xa6, 0x8d, 0x69, 0xfe, 0xc3, 0x0c, 0x6e, 0x6c, 0xf0, 0x16, 0x92, 0x8a,
	0xe8, 0xa3, 0xac, 0x04, 0xb7, 0x0a, 0x8e, 0xc9, 0xf0, 0x06, 0x62, 0x4d, 0xba, 0x14, 0x85, 0xff,
	0x43, 0x86, 0x4b, 0xc0, 0x83, 0x8f, 0xf6, 0x6d, 0x2d, 0x7a, 0xd5, 0x7c, 0x0f, 0x12, 0xec, 0x4f,
	0x71, 0x30, 0x30, 0xdb, 0xaa, 0x7b, 0x29, 0x79, 0x5b, 0x9f, 0x9c, 0x41, 0x8c, 0xf7, 0xb0, 0xb0,
	0x4e, 0x3b, 0xae, 0x6a, 0xd9, 0x74, 0xba, 0xa1, 0x36, 0x0d, 0xed, 0x8b, 0xed, 0x06, 0x02, 0x3b,
	0x0f, 0x1f, 0x21, 0x7a, 0xe5, 0xda, 0x96, 0x0a, 0xaf, 0x46, 0xdd, 0x61, 0xf7, 0xcb, 0xc4, 0xb7,
	0x76, 0x99, 0x55, 0xe8, 0x6e, 0xe8, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x55, 0x9f, 0x64,
	0xba, 0x01, 0x00, 0x00,
}
