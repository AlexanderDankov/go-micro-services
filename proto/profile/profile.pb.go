// Code generated by protoc-gen-go.
// source: proto/profile/profile.proto
// DO NOT EDIT!

/*
Package profile is a generated protocol buffer package.

It is generated from these files:
	proto/profile/profile.proto

It has these top-level messages:
	Args
	Reply
	Hotel
	Address
	Image
*/
package profile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Args struct {
	HotelIds []int32 `protobuf:"varint,1,rep,name=hotelIds" json:"hotelIds,omitempty"`
	Locale   string  `protobuf:"bytes,2,opt,name=locale" json:"locale,omitempty"`
}

func (m *Args) Reset()                    { *m = Args{} }
func (m *Args) String() string            { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()               {}
func (*Args) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Reply struct {
	Hotels []*Hotel `protobuf:"bytes,1,rep,name=hotels" json:"hotels,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reply) GetHotels() []*Hotel {
	if m != nil {
		return m.Hotels
	}
	return nil
}

type Hotel struct {
	Id          int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PhoneNumber string   `protobuf:"bytes,3,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Address     *Address `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	Images      []*Image `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
}

func (m *Hotel) Reset()                    { *m = Hotel{} }
func (m *Hotel) String() string            { return proto.CompactTextString(m) }
func (*Hotel) ProtoMessage()               {}
func (*Hotel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Hotel) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Hotel) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type Address struct {
	StreetNumber string `protobuf:"bytes,1,opt,name=streetNumber" json:"streetNumber,omitempty"`
	StreetName   string `protobuf:"bytes,2,opt,name=streetName" json:"streetName,omitempty"`
	City         string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	State        string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	Country      string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	PostalCode   string `protobuf:"bytes,6,opt,name=postalCode" json:"postalCode,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Image struct {
	Url     string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Default bool   `protobuf:"varint,2,opt,name=default" json:"default,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Args)(nil), "profile.Args")
	proto.RegisterType((*Reply)(nil), "profile.Reply")
	proto.RegisterType((*Hotel)(nil), "profile.Hotel")
	proto.RegisterType((*Address)(nil), "profile.Address")
	proto.RegisterType((*Image)(nil), "profile.Image")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Profile service

type ProfileClient interface {
	GetHotels(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error)
}

type profileClient struct {
	cc *grpc.ClientConn
}

func NewProfileClient(cc *grpc.ClientConn) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) GetHotels(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/profile.Profile/GetHotels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profile service

type ProfileServer interface {
	GetHotels(context.Context, *Args) (*Reply, error)
}

func RegisterProfileServer(s *grpc.Server, srv ProfileServer) {
	s.RegisterService(&_Profile_serviceDesc, srv)
}

func _Profile_GetHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProfileServer).GetHotels(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Profile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profile.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHotels",
			Handler:    _Profile_GetHotels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x6a, 0xf2, 0x40,
	0x14, 0xc5, 0x89, 0x9a, 0x44, 0x6f, 0xd4, 0x4f, 0xe6, 0xeb, 0x22, 0xb4, 0x50, 0x6c, 0xa0, 0x54,
	0xba, 0xb0, 0x60, 0xe9, 0x03, 0x48, 0x17, 0xad, 0x9b, 0x52, 0xfa, 0x06, 0x63, 0xe6, 0xaa, 0x03,
	0x63, 0x26, 0xcc, 0x4c, 0x16, 0xbe, 0x44, 0x9f, 0xb9, 0x93, 0xeb, 0xa4, 0x42, 0x37, 0xf9, 0x73,
	0x38, 0x73, 0xce, 0x6f, 0xee, 0x85, 0x9b, 0xda, 0x68, 0xa7, 0x9f, 0xfc, 0x73, 0x27, 0x15, 0x76,
	0xef, 0x25, 0xa9, 0x2c, 0x0d, 0xbf, 0xc5, 0x02, 0x06, 0x6b, 0xb3, 0xb7, 0x6c, 0x06, 0xc3, 0x83,
	0x76, 0xa8, 0x36, 0xc2, 0xe6, 0xd1, 0xbc, 0xbf, 0x88, 0xd9, 0x14, 0x12, 0xa5, 0x4b, 0xae, 0x30,
	0xef, 0xcd, 0xa3, 0xc5, 0xa8, 0x78, 0x80, 0xf8, 0x0b, 0x6b, 0x75, 0x62, 0xb7, 0x90, 0x90, 0xf5,
	0x6c, 0xcc, 0x56, 0xd3, 0x65, 0x97, 0xfd, 0xde, 0xca, 0xc5, 0x77, 0x04, 0x31, 0x7d, 0x31, 0x80,
	0x9e, 0x14, 0xde, 0x15, 0xf9, 0xb8, 0x31, 0x0c, 0x2a, 0x7e, 0x0c, 0x61, 0xec, 0x3f, 0x64, 0xf5,
	0x41, 0x57, 0xf8, 0xd1, 0x1c, 0xb7, 0x68, 0xf2, 0x7e, 0x27, 0x0a, 0xb4, 0xa5, 0x91, 0xb5, 0x93,
	0xba, 0xca, 0x07, 0x24, 0xde, 0x41, 0xca, 0x85, 0x30, 0x68, 0x6d, 0x1e, 0x7b, 0x21, 0x5b, 0xcd,
	0x7e, 0xeb, 0xd6, 0x67, 0xbd, 0x05, 0x92, 0x47, 0xbe, 0x47, 0x9b, 0x27, 0x7f, 0x80, 0x36, 0xad,
	0x5c, 0x34, 0x90, 0x76, 0xd6, 0x2b, 0x18, 0x5b, 0x67, 0x10, 0x5d, 0x28, 0x8e, 0xa8, 0xc3, 0x83,
	0x06, 0xf5, 0x42, 0xe8, 0x79, 0x4b, 0xe9, 0x4e, 0x01, 0x6d, 0x02, 0xb1, 0x75, 0xdc, 0x61, 0x80,
	0xfa, 0x07, 0x69, 0xa9, 0x9b, 0xca, 0x99, 0x13, 0x41, 0x51, 0x42, 0xad, 0xbd, 0x43, 0xbd, 0x6a,
	0x81, 0x1e, 0xa3, 0x1d, 0xd8, 0x3d, 0xc4, 0xd4, 0xcf, 0x32, 0xe8, 0x37, 0x46, 0x85, 0x2e, 0x7f,
	0x54, 0xe0, 0x8e, 0x37, 0xca, 0x51, 0xd1, 0x70, 0xf5, 0x02, 0xe9, 0xe7, 0x19, 0x97, 0x3d, 0xc2,
	0xe8, 0x0d, 0x1d, 0xcd, 0xce, 0xb2, 0xc9, 0xe5, 0x9e, 0x7e, 0x41, 0xd7, 0x97, 0x4b, 0xd1, 0x16,
	0xb6, 0x09, 0x2d, 0xf2, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x89, 0xb7, 0x5d, 0xe7, 0x01,
	0x00, 0x00,
}
